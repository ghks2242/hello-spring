스프링의 핵심

- 스프링은 자바언어 기반의 프레임워크
- 자바언어의 가장 큰 특징은 객체지향언어
- 스프링은 객체 지향언어가 가진 강력한 특징을 살려내는 프레임워크
- 스프링은 좋은객체지향 애플리케이션을 개발할수있게 도와주는 프레임워크



좋은객체 지향 설계의 5가지 원칙

SRP :   단일 책임 원칙
        - 한 클래스는 하나의 책임만 가져야한다.
        - 하나의  책임라는것은 모호하다.
            -- 클 수 있고 작을 수 있다.
            -- 문맥과 상황에 따라 다르다.
        - 중요한 기준은 변경이다. 변경이 있을때 파급효과가 적으면 단일책임원칙을 잘따른것.
        - ex) UI변경, 객체의 생성과 사용을분리

OCP :   개방-폐쇄 원칙
        - 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀있어야한다.
        - 이런 거짓말 같은말이? 확장을 할려면, 당연히 기존코드를 변경?
        - 다형성을 활용해보자
        - 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현
        - 지금까지 배운 역할과 구현의 분리를 생각해보자

        @문제점
        - MemberService 클라이언트가 구현클래스를 직접선택
            -- MemberRepository m = new MemoryMemberRepository(); // 기존코드
            -- MemberRepository m = new JdbcMemberRepository(); // 변경코드
        - 구현객체를 변경하려면 클라이언트 코드를 변경해야한다.
        - 분명 다형성을 사용헀지만 OCP 원칙을 지킬수없다.
        - 객체를 생성하고 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다 (이 역할을 스프링컨테이너가 해준다)
            -- OCP 원칙을 지키기위해 DI, IOC 컨테이너도 필요하다

LSP :   리스코프 치환원칙
        - 프로그램의 객체는 프로그램의 정확성을 꺠드리지 않으면서 하위 타입의 인스턴스로 바꿀수있어야한다.
        - 다형성에서 하위클래스는 인터페이스 규약을 다지켜야한다는것 다형성을 지원하기 위한원칙 인터페이스를 구현한 구현체는 믿고 사용하려면 이원칙이필요하다.
        - 단순히 컴파일에 성공하는것을 넘어서는 이야기
        - ex) 자동차 인터페이스의 엑셀은 앞으로 가라는기능, 뒤로가게 구현하면 LSP 위반, 느리더라도 앞으로 가야한다

ISP :   인터페이스 분리 원칙
        - 특정 클라이언트를 위한 인터페이스 여러개가 범용인터페이스 하나보다 낫다
        - 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
        - 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
        - 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지않음
        - 인터페이스가 명확해지고, 대체가능성이 높아진다.

DIP :   의존관계 역전 원칙
        - 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다." 의존성 주입은 이 원칙을 따르는 방법중 하나이다.
        - 쉽게 이야기해서 구현 클래스에 의존하지말고, 인터페이스에 의존하라는뜻
        - 앞에서 이야기한 역할에 의존하게 해야한다와 같다. 객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할수있다
          구현체에 의존하게 되면 변경이 아주어려워진다.

        - 그런데 OCP 에서 설명한 MemberService 는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존한다.
        - MemberService 클라이언트가 구현 클래스를 직접선택
            -- MemberRepository m = new "MemoryMemberRepository"();
        - "MemoryMemberRepository" DIP 위반

정리
    - 객체 지향의 핵심은 다형성
    - 다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할수없다.
    - 다형성 만으로는 구현객체를 변경할떄 클라이언트 코드도 함께변경된다.
    - 다형성 만으로는 OCP, DIP 를 지킬 수 없다.
